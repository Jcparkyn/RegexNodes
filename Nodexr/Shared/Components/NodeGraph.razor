@using Nodexr.Shared;
@using Nodexr.Shared.NodeTypes;
@using Nodexr.Shared.Components;
@inject INodeDragService NodeDragService
@inject INoodleDragService NoodleDragService  
@inject INodeHandler NodeHandler

@{
    //Console.WriteLine("Updating Node Graph");
}
<div class="viewport nodegraph" onwheel="panzoom.zoom(event)" onmousedown="panzoom.startPan(event)"
    ondragover="event.preventDefault()" @ondrop="@OnDrop" @onkeydown="@OnKeyDown" tabindex="-1">
    <div style="width:100%; height:100%; position:absolute;" @onclick="@DeselectNode"></div>
    <div id="nodegraph" style="position:relative; transform-origin:0% 0%; width:0px; height:0px;">
        @foreach(var node in NodeHandler.Tree.Nodes)
        {
            <NodeView @key="node" Data="node" />
        }
        <svg style="overflow:visible;">
            <NoodleSvg Noodle="NoodleDragService.TempNoodle" DomId="tempNoodle" />
            <NoodleCollection Nodes="@NodeHandler.Tree.Nodes"/>
        </svg>
    </div>
</div>

@functions{

    protected int XOffset { get; set; } = 0;
    //OutputDisplay outputDisplay;

    bool shouldRender = false;

    protected override bool ShouldRender() => shouldRender;

    protected override void OnInitialized()
    {
        //NodeHandler.OnNodeCountChanged += StateHasChanged;
        NodeHandler.OnRequireNodeGraphRefresh += (sender, e) => Refresh();
    }

    void Refresh()
    {
        shouldRender = true;
        StateHasChanged();
        shouldRender = false;
    }

    void OnDrop(DragEventArgs e)
    {
        NodeDragService.OnDrop(e);
        Refresh();
    }

    void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Delete" || e.Key == "Backspace")
        {
            NodeHandler.DeleteSelectedNode();
        }
        else if(e.Key == "Escape")
        {
            DeselectNode();
        }
    }

    void DeselectNode()
    {
        NodeHandler.DeselectAllNodes();
    }
}