@inject INodeHandler NodeHandler;
@implements IDisposable


    <path id="@DomId" class="noodle" d="@PathInstructions"
          style="display:@(Noodle.Enabled ? "default" : "none"); @CssStrokeStyle"/>



@functions{
    //public const string normalClass = "noodle";
    //public const string invalidClass = "noodle noodle-invalid";

    [Parameter] public INoodleData Noodle { get; set; }
    [Parameter] public string DomId { get; set; } = "";
    [Parameter] public string Gradient { get; set; }

    public bool Valid { get; set; } = true;
    //public string CssClass => Valid ? normalClass : invalidClass;
    protected string PathInstructions {
        get
        {
            long startX = Noodle.StartPos.x;
            double startY = Noodle.StartPos.y + 0.01d;
            long endX = Noodle.EndPos.x, endY = Noodle.EndPos.y;
            long ctrlLength = (long)(5 + 0.4*Math.Abs(endX-startX) + 0.2*Math.Abs(endY-startY));
            return FormattableString.Invariant(
                $"M {startX} {startY} C {startX + ctrlLength} {startY} {endX - ctrlLength} {endY} {endX} {endY}");
        }
    }

    string CssStrokeStyle => string.IsNullOrEmpty(Gradient) ?
        "" :
        "stroke: url(#" + Gradient + ")";


    protected override void OnInitialized()
    {
        Noodle.NoodleChanged += Refresh;
        //NodeHandler.OnRequireNodeGraphRefresh += StateHasChanged;
    }

    public void Refresh(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Noodle.NoodleChanged -= Refresh;
    }
}
